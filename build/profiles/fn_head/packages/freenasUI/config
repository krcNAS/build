[Package]

name = freenasUI
comment = "FreeNAS User Interface"
desc = "FreeNAS UI (django-based)"
www = http://www.freenas.org/
origin = freenas/ui
maintainer = dev@ixsystems.com
prefix = /
arch = freebsd:10:x86:64
licenselogic = or
licenses = [BSD, MIT, GPL]

requires-reboot = False
[Files]
include = /usr/local/www/freenasUI
	/usr/local/www/webui

[Scripts]

# Fresh installs don't need this.
# However, if the package name changed, we would.

#post-install = 
#	if [ -f /data/freenas-v1.db ]; then
#	   /usr/bin/touch /data/cd-upgrade
#	   /usr/bin/touch /data/need-update
#	fi
#	test -f /data/freenas-v1.db && \
#		/usr/bin/yes | /usr/local/bin/python \
#		            /usr/local/www/freenasUI/manage.py migrate --all --merge --delete-ghost-migrations

post-upgrade = 
	KV="$(uname -K)" || KV=0
        if [ "${KV}" -lt 1100000 ]; then
		script_name=freenasUI-post-upgrade
		mkdir -p /update-scripts
		cp "${0}" /update-scripts/${script_name}
		echo  ${script_name} >> /update-scripts/order
		exit 0
        fi

	     touch /tmp/.sqlite3_ha_skip

             # If database does not have account:0005_add_netdata_user
             # it means its too old and needs to run old migrator first
             newdb=$(/usr/local/bin/sqlite3 /data/freenas-v1.db "select count() from django_migrations where app = 'account' and name = '0005_add_netdata_user'" 2> /dev/null)
             if [ "${newdb}" != "1" ]; then
	         /usr/local/sbin/migrate93 -f /data/freenas-v1.db > "/data/update.failed" 2>&1 && rm -f /data/update.failed
             else
                 rm -f /data/update.failed
             fi
             if [ ! -f "/data/update.failed" ]; then
                 /usr/local/www/freenasUI/manage.py migrate --fake-initial --noinput > "/data/update.failed" 2>&1 && rm -f /data/update.failed
             fi
	     rm -f /tmp/.sqlite3_ha_skip

	     # Remove dangling .pyc files because previously freenas-ui did not include .pyc in pkg-plist
	     find /usr/local/www/freenasUI -type f -iname "*.pyc" | while read f; do
	             if ! dirname $f|grep -q __pycache__; then
	                     rm -f $f;
	             fi
	     done;

[Services]

# This is a list of comma-seperated services provided by this package.
services = WebUI

# This is a list of comma-seperated services that will always be
# be restarted when this package is update.  "all" means all services
# provided by this package.
restart = all
